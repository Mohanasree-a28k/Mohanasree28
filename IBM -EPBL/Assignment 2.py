# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BywnAjNjuclfx6QOThzmgig0P0qf-k7d
"""

import numpy as np

import pandas as pd

df=pd.read_csv("Churn_Modelling.csv")

df

Visualization

import matplotlib.pyplot as plt

import seaborn as sns

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

df[['RowNumber','Surname','CreditScore','Geography',
     'Gender','Age','Tenure']] .describe()

[1] Univarient Analysis

sns.histplot(df.Geography,kde=True)

# plot count plot for the gender column

sns.countplot(df.Gender)

[2]Bi-varient Analysis

df[['RowNumber','CustomerId','Surname','CreditScore','Geography',
    'Gender','Age','Tenure']].corr()

sns.scatterplot(df.CreditScore,df.Age)

[3]Multivarient Analysis

sns.pairplot(data=df[['CustomerId','Surname','CreditScore','Geography','Gender','Age','Tenure']],hue='Tenure')

# summary Statistics
df.describe()

df.dtypes

# mode
df['Age'].mode()

# calculation of the mean
df["Age"].mean()

#calculation of the mean and round the result
round(df["Age"].mean(),3)

# calculation of the median
df["Age"].median()

[5]Handling Missing Values

df.isna().any()

df.isnull().sum()

df.isnull()

df.notnull()

[6] Find the Outliers and replace the Outliers

sns.boxplot(x=df['Age'])

sns.boxplot(x=df['Tenure'])

[7]Check for Categorical column and perform encoding

a=df.columns

b=df._get_numeric_data().columns

b

list(set(a)-set(b))

[8] Split the data into dependent and independend variables

# x - Independend
# y - Dependend
x=df.drop('Exited',axis=1)
y=df['Exited']

x.head()

y.head()

[9]Scale the independent variables

from sklearn import linear_model

from sklearn.preprocessing import StandardScaler

scale=StandardScaler

x=df[['Age','Tenure']]

[10] Split the data into training and testing

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

print('X Train shape:{}'.format(x_train.shape,y_train.shape))

print('X Test Shape:{},Y Test SHape:{}'.format(x_test.shape,y_test.shape))